" neobundle.vim
" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if has('vim_starting')
 if &compatible
   set nocompatible               " Be iMproved
 endif

 " Required:
 set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

  " Let NeoBundle manage NeoBundle
  " Required:
  NeoBundleFetch 'Shougo/neobundle.vim'

  " My Bundles here:
  " Refer to |:NeoBundle-examples|.
  " Note: You don't set neobundle setting in .gvimrc!

  " core plugins
  NeoBundle 'gmarik/Vundle.vim' " Vundle itself
  NeoBundle 'bling/vim-airline' " bottom bar + tabs
  NeoBundle 'edkolev/tmuxline.vim' " I'm still not sure about what it really does
  NeoBundle 'bling/vim-bufferline' " Show buffer in command bar

  " color schemes and code highlighting
  NeoBundle 'chriskempson/base16-vim' " Vim colors
  NeoBundle 'vim-ruby/vim-ruby' " Ruby highlighting
  NeoBundle 'jelera/vim-javascript-syntax' " JavaScript highlighting
  NeoBundle 'kchmck/vim-coffee-script' " CoffeeScript highlighting
  NeoBundle 'skammer/vim-css-color' " CSS highlighting
  NeoBundle 'hail2u/vim-css3-syntax' " Add CSS3 syntax support to vim's built-in `syntax/css.vim`.
  NeoBundle 'cakebaker/scss-syntax.vim' " SCSS highlighting
  NeoBundle 'groenewege/vim-less' " vim syntax for LESS (dynamic CSS)
  NeoBundle 'slim-template/vim-slim' " Slim highlighting
  NeoBundle 'gregsexton/MatchTag' " Vim's MatchParen for HTML tags
  NeoBundle 'scrooloose/syntastic' " syntax analyzer

  " file navigation/search
  NeoBundle 'Shougo/vimproc.vim', {
  \ 'build' : {
  \     'windows' : 'tools\\update-dll-mingw',
  \     'cygwin' : 'make -f make_cygwin.mak',
  \     'mac' : 'make -f make_mac.mak',
  \     'linux' : 'make',
  \     'unix' : 'gmake',
  \    },
  \ } " Interactive command execution in Vim.
  NeoBundle 'Shougo/unite.vim' " Unite and create user interfaces
  NeoBundle 'Shougo/vimshell.vim' " Powerful shell implemented by vim.
  NeoBundle 'Shougo/vimfiler.vim' " Powerful file explorer implemented by Vim script
  NeoBundle 'Shougo/neocomplete.vim'
  NeoBundle 'Shougo/neosnippet'
  NeoBundle 'Shougo/neosnippet-snippets'

  NeoBundle 'junkblocker/unite-codesearch'
  NeoBundle 'junkblocker/unite-tasklist'
  NeoBundle 'jlanzarotta/bufexplorer' " search for files that have been changed
  NeoBundle 'rking/ag.vim' " search for a pattern through the directories (need to install the_silver_searcher)
  NeoBundle 'majutsushi/tagbar' " Vim NeoBundle that displays tags in a window, ordered by scope
  NeoBundle 'skwp/greplace.vim'

  " utils
  NeoBundle 'sjl/gundo.vim' " keep tracking of all undos
  NeoBundle 'tpope/vim-fugitive' " Vim + Git
  NeoBundle 'tpope/vim-surround' " edit what's surrounding a snippet of code
  NeoBundle 'tpope/vim-abolish' " find/replace on steroids
  " NeoBundle 'ervandew/supertab' " Perform all your vim insert mode completions with Tab
  NeoBundle 'tomtom/tcomment_vim' " comment code
  NeoBundle 'tpope/vim-endwise' " close 'if', 'def' etc
  NeoBundle 'vasconcelloslf/vim-interestingwords' " Like Sublime Highlight Words
  NeoBundle 'vim-scripts/PreserveNoEOL' " Prevent remove EOL in Final Lines
  NeoBundle 'terryma/vim-multiple-cursors' " Multi Cursors Like Sublime
  NeoBundle 'mattn/emmet-vim' " Emmet =]
  NeoBundle 'sentientmonkey/vim-flog' " Vim Flog Plugin
  NeoBundle 'terryma/vim-smooth-scroll' " Make scrolling in Vim more pleasant
  NeoBundle 'MattesGroeger/vim-bookmarks' " Vim bookmark plugin
  NeoBundle 'Raimondi/delimitMate' " Vim plugin, provides insert mode auto-completion for quotes, parens, brackets, etc.
  NeoBundle 'Lokaltog/vim-easymotion' " Vim motions on speed!
  NeoBundle 'Yggdroot/indentLine' " A vim plugin to display the indention levels with thin vertical lines
  NeoBundle 'compactcode/open.vim' " Open files that were found by an external command.
  NeoBundle 'vim-scripts/SQLUtilities' " SQL utilities - Formatting, generate - columns lists, procedures for databases
  NeoBundle 'vim-scripts/Align' " Help folks to align text, eqns, declarations, tables, etc
  NeoBundle 'chrisbra/csv.vim' " A Filetype plugin for csv files
  NeoBundle 'mhinz/vim-hugefile' " Speed up loading of large files.
  NeoBundle 'tpope/vim-rails'
  NeoBundle 'mattn/webapi-vim'
  NeoBundle 'blueyed/vim-diminactive'
  NeoBundle 'fatih/vim-go'

  " Snippets
  " NeoBundle 'tomtom/tlib_vim'
  " NeoBundle 'MarcWeber/vim-addon-mw-utils'
  " NeoBundle 'garbas/vim-snipmate'
  " NeoBundle 'honza/vim-snippets'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck


" required
set nocompatible

syntax on

filetype off

colorscheme base16-default " set colorscheme
let base16colorspace=16
set background=dark
set t_Co=16
set t_ut=
set encoding=utf-8 " set charset encoding
" set number "show line numbers
set history=1000 " store lots of :cmdline history
set showcmd " show incomplete cmds down the bottom
set showmode " show current mode down the bottom
set gcr=a:blinkon0 " disable cursor blink
set visualbell " the sound of silence
set autoread " reload files changed outside Vim
set hidden " buffers can exist in the background without being in a window
set list listchars=tab:\ \ ,trail:Â· " display tabs and trailing spaces visually
set nowrap " don't wrap lines
set linebreak " wrap lines at convenient points
set equalalways " split windows equally
set wildignore=*.o,*.obj,*.bak,*.exe,*.pyc,*.jpg,*.gif,*.png " there files will be ignored when completing in wild menu
set clipboard+=unnamed,unnamedplus,autoselect " share clipboard
set ttyfast " I  gOt a fast terminal!
set ttimeoutlen=50  " make Esc work faster
set lazyredraw " get faster, redraw only when it's needed
set shiftround " round the indent to shiftwidth (when at 3 spaces, and I hit > go to 4, not 5)
set shiftwidth=2 " auto-indent amount when using >> <<
set softtabstop=2 " when hitting tab or backspace, how many spaces should a tab be (see expandtab)
set cursorline " draws a horizontal highlight (or underline, depending on your colorscheme) on the line your cursor is currently on.
set showmatch " when your cursor moves over a parenthesis-like character, the matching one will be highlighted as well.
set novisualbell " Disable visual blink

" Transparent Background
hi Normal ctermbg=none

let loaded_matchparen=1 " match paranthesis

" GUI-only defaults
if has('gui_running')
  set guifont=Dejavu\ Sans\ Mono\ 9
  set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
  set guioptions-=r  "remove right-hand scroll bar
  set guioptions-=l
  set guioptions-=h
  set guioptions-=B
  set guioptions-=R
  set guioptions-=L
  set showtabline=2   " show tabs in gvim, not vim
  set guitablabel=%t  " show simple filname as tabname
endif

" main key
let mapleader="\\"

" Folding
set foldenable " enable folding
set foldlevelstart=10 " open most folds by default
set foldnestmax=10

" space open/closes folds
nnoremap <space> za
set foldmethod=indent " fold based on indent level

" search
set hlsearch   " higHlight search matches
set incsearch " search as you type
set gdefault  " global matching is default
set smartcase " use smartcase, when search query starts with Uppercase, turn off case insensitive search

" indentation
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab


" enable hightlight for markdown
au BufNewFile,BufRead *.{md,mdown,mkd,mkdn,markdown,mdwn} set filetype=markdown

" tabs
set expandtab " no real tabs!
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabContextDefaultCompletionType = '<c-n>'

" status
set laststatus=2
set statusline=\ "
set statusline+=%f\ " file name
set statusline+=[
set statusline+=%{strlen(&ft)?&ft:'none'}, " filetype
set statusline+=%{&fileformat}] " file format
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set statusline+=\ %{fugitive#statusline()}
set statusline+=%h%1*%m%r%w%0* " flag
set statusline+=%= " right align
set statusline+=%-14.(%l,%c%V%)\ %<%P " offset

" ag.vim ignore log and tmp
if !exists("g:agprg")
    let g:agprg="ag --ignore ./log --ignore ./tmp --nogroup --column"
endif

:helptags ~/.vim/doc

" Emmet map
" let g:user_emmet_leader_key='<C-E>'
filetype plugin indent on

" Refresh File
nnoremap <leader>r :e<CR>

" tNumber Line
nnoremap <F4> :set nonumber!<CR>

" Clear Search Highlight
map <F3> :let @/ = ""<CR>

" convenient viewport switching
map <C-h> <C-w>j
map <C-j> <C-w>k
map <C-k> <C-w>i
map <C-l> <C-w>l

" open vertical  split and switch to it
nnoremap <leader>v <C-w>v<C-w>l

" open horizontal  split and switch to it
nnoremap <leader>h :split<CR>

" Save like a pro (CTRL+s)
nnoremap <leader>w :w<CR>

" Quit like a pro
nnoremap <C-M-q> :Kwbd<CR>
nnoremap <leader>q :q<CR>

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

" upper/lower first char of word
nmap <leader>wu mQgewvU`Q
nmap <leader>wl mQgewvu`Q

" this key combination gets rid of the search highlights
nmap <leader><space> :noh<cr>

" start ag search
nnoremap <leader>a :Ag
nnoremap <leader>gs :Gsearch

" remove unwanted spaces
nmap <leader>rs :%s/\s\+$//<cr>

" buffer - moving around
map <C-Left> :bprevious<CR>
map <C-Right> :bnext<CR>
map <C-Down> :bdelete!<CR>

" tabs - moving around, (CTRL+t to new tab)
noremap <C-PageUp> :tabprev<CR>
noremap <C-PageDown> :tabnext<CR>
noremap <C-Up> :tabnew<CR>

" noremap <leader>s :w<CR>
" noremap <leader>S :saveas %<CR>
" noremap <C-Home> :tabedit %<CR>

" nmap <c-s> :w<CR>
" vmap <c-s> <Esc><c-s>gv
" imap <c-s> <Esc><c-s>

autocmd BufWritePre * :%s/\s\+$//e
nmap <F10> :update<CR>
vmap <F10> <Esc><F10>gv
imap <F10> <c-o><F10>

if has("gui_macvim")
  " Press Ctrl-Tab to switch between open tabs (like browser tabs) to
  " the right side. Ctrl-Shift-Tab goes the other way.
  noremap <C-Tab> :tabnext<CR>
  noremap <C-S-Tab> :tabprev<CR>

  " switch to specific tab numbers with Command-number
  noremap <D-1> :tabn 1<CR>
  noremap <D-2> :tabn 2<CR>
  noremap <D-3> :tabn 3<CR>
  noremap <D-4> :tabn 4<CR>
  noremap <D-5> :tabn 5<CR>
  noremap <D-6> :tabn 6<CR>
  noremap <D-7> :tabn 7<CR>
  noremap <D-8> :tabn 8<CR>
  noremap <D-9> :tabn 9<CR>
endif

" YouCompleteMe
highlight Pmenu ctermfg=black ctermbg=grey gui=bold
highlight PmenuSel ctermfg=yellow ctermbg=darkgrey gui=bold

" Cursor Line
highlight CursorLine ctermbg=green ctermfg=black
au InsertLeave * hi CursorLine ctermbg=green ctermfg=black
au InsertEnter * hi CursorLine ctermbg=red ctermfg=black

" Number Column
highlight LineNr ctermfg=green ctermbg=black gui=bold
highlight CursorLineNr ctermfg=black ctermbg=green gui=bold

" Gutter / Signs
highlight SignColumn ctermbg=black guibg=black

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Flog
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:let g:flog_low_color_hl = "term=standout ctermfg=green ctermbg=black guifg=green guibg=black"
:let g:flog_medium_color_hl = "term=standout ctermfg=yellow ctermbg=black guifg=yellow guibg=black"
:let g:flog_high_color_hl = "term=standout cterm=bold ctermfg=red ctermbg=black gui=bold guifg=red guibg=black"
:let s:background_hl = "guifg=white guibg=black gui=NONE"
" disable default
:let g:flog_enable=0
nmap <F9> :call ToggleFlog()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Gundo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <F5> :GundoToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => BufExplorer
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <F6> :BufExplorerHorizontalSplit<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => tComment
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <C-c> :TComment<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => TagBar
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <F8> :TagbarToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VimShell
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>sh :VimShell -buffer-name=Console<CR>

" let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
if has('win32') || has('win64')
  " Display user name on Windows.
  let g:vimshell_prompt = $USERNAME."% "
else
  " Display user name on Linux.
  let g:vimshell_prompt = $USER."% "
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VimFIler
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F7> :VimFilerExplorer<CR>

let g:vimfiler_as_default_explorer = 1
let g:vimfiler_expand_jump_to_first_child = 0
let g:vimfiler_enable_clipboard = 0
let g:vimfiler_safe_mode_by_default = 0
" Like Textmate icons.
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = 'â¾'
let g:vimfiler_tree_closed_icon = 'â¸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_readonly_file_icon = 'â'
let g:vimfiler_marked_file_icon = 'â'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Unite
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:unite_force_overwrite_statusline = 0
let g:unite_source_history_yank_enable = 1
let g:unite_data_directory='~/.vim/.cache/unite'
let g:unite_source_rec_unit = 250

if executable('ag')
  let g:unite_source_rec_async_command= ['ag', '--follow', '--nocolor', '--nogroup', '--hidden',  '-g', '']
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts =
  \ '-i --vimgrep --hidden --ignore ' .
  \ '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
  let g:unite_source_grep_recursive_opt = ''
endif

call unite#custom#profile('default', 'context', {
  \ 'start_insert': 1,
  \ 'wipe': 1,
  \ 'hide-source-names': 1,
  \ 'previewheight': 100,
  \ 'winheight': 15,
  \ 'direction': 'botright',
  \ 'split_rule': 'botright',
  \ 'cursor_line_highlight' : 'CursorLine'
\ })
call unite#custom#profile('source/grep', 'context', {
  \ 'no_quit': 1
  \ })
call unite#custom#source('file_rec,file_rec/async,file_mru,file,buffer,grep,codesearch',
  \ 'ignore_pattern', join(['\.git/', '\.azk', 'tmp/', '\.tmp', '\.mo', '\.jpg', '\.jpeg', '\.png', '.gif', '\.bmp', '\.log', '/log/'],
  \ '\|'))

call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])

nnoremap <C-P> :<C-u>Unite -buffer-name=files -profile-name=default buffer file_rec/async:!<cr>
nnoremap <C-O> :<C-u>Unite -buffer-name=menu -profile-name=default menu<cr>
nnoremap <C-L> :<C-u>Unite -buffer-name=line -profile-name=default -auto-preview line<cr>
nnoremap <C-I> :<C-u>Unite -buffer-name=codesearch -profile-name=default -auto-preview codesearch<cr>
nnoremap <C-k> :<C-u>Unite -buffer-name=tasklist -profile-name=default -auto-preview tasklist<cr>

autocmd FileType unite call s:unite_settings()

function! s:unite_settings()
  let b:SuperTabDisabled=1
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  imap <buffer> <C-a>   <Plug>(unite_move_head)
  imap <buffer> <End>   <Plug>(unite_move_head)
  imap <silent><buffer><expr> <C-x> unite#do_action('split')
  imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
  nmap <buffer> <ESC> <Plug>(unite_exit)
endfunction

let g:unite_source_menu_menus = {}
function! SourceMyScripts()
  let file_list = split(globpath("~/.vim/unite-menus", "*"), '\n')
  for file in file_list
    execute( 'source '.file )
  endfor
endfunction
call SourceMyScripts()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Bookmarks
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
highlight BookmarkSign ctermbg=NONE ctermfg=1
highlight BookmarkAnnotationSign ctermbg=NONE ctermfg=2

highlight BookmarkLine ctermbg=1 ctermfg=NONE
highlight BookmarkAnnotationLine ctermbg=2 ctermfg=NONE

let g:bookmark_sign = 'â¥'
let g:bookmark_highlight_lines = 0
let g:bookmark_auto_save_file = $HOME.'/.vim/.cache/vim-bookmarks'

nmap <Leader>b <Plug>BookmarkToggle
nmap <Leader>bi <Plug>BookmarkAnnotate
nmap <Leader>ba <Plug>BookmarkShowAll
nmap <Leader>bn <Plug>BookmarkNext
nmap <Leader>bp <Plug>BookmarkPrev
nmap <Leader>bc <Plug>BookmarkClear
nmap <Leader>bx <Plug>BookmarkClearAll

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Easy Motion
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <Leader> <Plug>(easymotion-prefix)

let g:EasyMotion_smartcase = 1

map <Leader>test :Open(alternate#FindAlternate())<CR>
map <Leader>testV :OpenVertical(alternate#FindAlternate())<CR>

highlight DiffAdd    cterm=bold ctermfg=black ctermbg=blue gui=none guifg=bg guibg=Red
highlight DiffDelete cterm=bold ctermfg=black ctermbg=red gui=none guifg=bg guibg=Red
highlight DiffChange cterm=bold ctermfg=black ctermbg=yellow gui=none guifg=bg guibg=Red
highlight DiffText   cterm=bold ctermfg=black ctermbg=white gui=none guifg=bg guibg=Red

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => IndentLines
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:indentLine_char = 'â'
let g:indentLine_color_term = 16
let g:indentLine_color_tty_light = 7 " (default: 4)
let g:indentLine_color_dark = 1 " (default: 2)

let g:indentLine_enabled = 1
let g:indentLine_noConcealCursor = 1
map <leader>u :IndentLinesToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Dim Active
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:diminactive_use_colorcolumn = 1
" let g:tmux_navigator_no_mappings = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Syntastic
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height = 4

let g:syntastic_error_symbol = "â"
let g:syntastic_warning_symbol = "â "

let g:syntastic_style_error_symbol = "sâ"
let g:syntastic_style_warning_symbol = "sâ "

hi SpellBad ctermfg=000 ctermbg=001 guifg=#990000 guibg=#990000
hi SpellCap ctermfg=000 ctermbg=003 guifg=#990000 guibg=#990000
hi SyntasticError ctermfg=000 ctermbg=001 guifg=#990000 guibg=#990000
hi SyntasticWarning ctermfg=000 ctermbg=003 guifg=#990000 guibg=#990000

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Show invisible Characters
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Shortcut to rapidly toggle `set list`
" nmap <leader>l :set list!<CR>
"
" " Use the same symbols as TextMate for tabstops and EOLs
" set listchars=tab:â¸\ ,eol:Â¬
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Gsearch
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set grepprg=ag
let g:grep_cmd_opts = '--line-numbers --noheading'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Smooth Scroll
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set scrolloff=8 " start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vim Airline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='wombat'
let g:airline#themes#base16#constant = 1
" let g:airline#extensions#tabline#show_buffers = 1
" let g:airline#extensions#tabline#excludes = ['unite']

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Code Search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:unite_source_codesearch_ignore_case = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NeoComplete
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 1
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  " return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1

" AutoComplPop like behavior.
" let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NeoSnippets
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" imap <expr><TAB>
"   \ pumvisible() ? "\<C-n>" :
"   \ neosnippet#expandable_or_jumpable() ?
"   \    "\<TAB>" : "\<Plug>(neosnippet_expand_or_jump)"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/snippets/'
